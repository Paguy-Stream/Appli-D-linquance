shiny::runApp('Tool')
runApp('Tool')
runApp('Tool')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(plm)
library(dplyr)
yl <- read_excel("~/Panel/asd_oct_2013_yl.xlsx")
# Supprimer les colonnes entièrement NA
yl <- yl %>% select(where(~ !all(is.na(.))))
# Imputer les NA avec la moyenne de la colonne
yl <- yl %>% mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Transformer les données de large à long format
yl_long <- yl %>%
pivot_longer(
cols = starts_with("_"),
names_to = "Year",
names_prefix = "_",
values_to = "Value")
# Conversion des colonnes si nécessaire
yl_long$Year <- as.numeric(yl_long$Year)
yl_long$Country <- as.factor(yl_long$Country)
# Normalisation des valeurs (si nécessaire)
yl_long <- yl_long %>%
mutate(Value_norm = (Value - mean(Value, na.rm = TRUE)) / sd(Value, na.rm = TRUE))
# Afficher un aperçu des données transformées
head(yl_long)
str(yl_long)
# Conversion en données de panel
yl_panel <- pdata.frame(yl_long, index = c("Country", "Year"))
# Ajustement du modèle à effets fixes
model_fixed <- plm(Value ~ Year, data = yl_panel, model = "within")
# Résumé du modèle
summary(model_fixed)
library(dplyr)
# Résumé statistique pour chaque variable
summary(yl_long)
# Statistiques descriptives de base
summary_stats <- yl_long %>%
group_by(Country, `Country name`, Variable, `ISIC code`, `Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE)
)
# Afficher les statistiques descriptives
print(summary_stats)
)
# Statistiques descriptives de base
summary_stats <- yl_long %>%
group_by(Country, `Country name`, Variable, `ISIC code`, `Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE)
)
# Afficher les statistiques descriptives
print(summary_stats)
)
# Statistiques descriptives de base
summary_stats <- yl_long %>%
group_by(Country, `Country name`, Variable, `ISIC code`, `Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE)
)
# Afficher les statistiques descriptives
print(summary_stats)
# Histogramme de la variable 'Value'
ggplot(yl_long, aes(x = Value)) +
geom_histogram(binwidth = 10, fill = 'blue', color = 'black', alpha = 0.7) +
labs(title = "Distribution des valeurs", x = "Valeur", y = "Fréquence")
# Boxplot par 'Country'
ggplot(yl_long, aes(x = Country, y = Value)) +
geom_boxplot(fill = 'blue', color = 'black', alpha = 0.7) +
labs(title = "Boxplot des valeurs par pays", x = "Pays", y = "Valeur")
# Diagramme de dispersion (scatter plot)
ggplot(yl_long, aes(x = Year, y = Value, color = Country)) +
geom_point() +
labs(title = "Valeurs par année et par pays", x = "Année", y = "Valeur")
ggplot(yl_long, aes(x = Country, y = Value, fill = Country)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(color = "black", size = 0.4, alpha = 0.5) +
labs(title = "Boxplot des valeurs par pays avec points de données", x = "Pays", y = "Valeur")
ggplot(yl_long, aes(x = Country, y = Value, fill = Country)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(color = "black", size = 0.4, alpha = 0.5) +
labs(title = "Boxplot des valeurs par pays avec points de données", x = "Pays", y = "Valeur")
ggplot(yl_long, aes(x = Value)) +
geom_histogram(binwidth = 50, fill = 'blue', color = 'black', alpha = 0.7) +
facet_wrap(~ Country) +
labs(title = "Distribution des valeurs par pays", x = "Valeur", y = "Fréquence")
ggplot(yl_long, aes(x = Value)) +
geom_histogram(binwidth = 50, fill = 'blue', color = 'black', alpha = 0.7) +
facet_wrap(~ Country) +
labs(title = "Distribution des valeurs par pays", x = "Valeur", y = "Fréquence")
ggplot(yl_long, aes(x = Country, y = Value, fill = Country)) +
geom_violin(alpha = 0.7) +
labs(title = "Violin plot des valeurs par pays", x = "Pays", y = "Valeur")
ggplot(yl_long, aes(x = Year, y = Value, color = `Sector name`)) +
geom_line() +
labs(title = "Tendance des valeurs par secteur au fil des années", x = "Année", y = "Valeur")
ggplot(yl_long, aes(x = Year, y = Value, color = `Sector name`)) +
geom_line() +
labs(title = "Tendance des valeurs par secteur au fil des années", x = "Année", y = "Valeur")
cor_matrix <- cor(yl_long %>% select_if(is.numeric), use = "complete.obs")
print(cor_matrix)
ggplot(yl_long, aes(x = `Sector name`, y = Value, fill = `Sector name`)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Boxplot des valeurs par secteur", x = "Secteur", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Créer un tableau de statistiques descriptives par secteur
summary_stats_sector <- yl_long %>%
group_by(`Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE),
.groups = 'drop'
)
# Afficher le tableau
print(summary_stats_sector)
# Définir les seuils de classification
thresholds <- c(50, 150, 300)
# Ajouter une colonne de classification
mean_values_country_sector <- mean_values_country_sector %>%
mutate(Classification = case_when(
Moyenne <= thresholds[1] ~ "Faible",
Moyenne <= thresholds[2] ~ "Moyen",
Moyenne <= thresholds[3] ~ "Élevé",
TRUE ~ "Très élevé"
))
# Créer un tableau des moyennes par pays et par secteur
mean_values_country_sector <- yl_long %>%
group_by(Country, `Country name`, `Sector name`) %>%
summarise(Moyenne = mean(Value, na.rm = TRUE), .groups = 'drop')
# Afficher le tableau des moyennes
print(mean_values_country_sector)
# Définir les seuils de classification
thresholds <- c(50, 150, 300)
# Ajouter une colonne de classification
mean_values_country_sector <- mean_values_country_sector %>%
mutate(Classification = case_when(
Moyenne <= thresholds[1] ~ "Faible",
Moyenne <= thresholds[2] ~ "Moyen",
Moyenne <= thresholds[3] ~ "Élevé",
TRUE ~ "Très élevé"
))
# Afficher le tableau avec la classification
print(mean_values_country_sector)
# Agréger les données pour obtenir la somme des valeurs par pays et par secteur
sum_values_country_sector <- yl_long %>%
group_by(Country, `Country name`, `Sector name`) %>%
summarise(Somme = sum(Value, na.rm = TRUE), .groups = 'drop')
# Afficher le tableau des sommes
print(sum_values_country_sector)
# Définir les seuils de classification
thresholds <- c(1000, 5000, 10000)
# Ajouter une colonne de classification
sum_values_country_sector <- sum_values_country_sector %>%
mutate(Classification = case_when(
Somme <= thresholds[1] ~ "Faible",
Somme <= thresholds[2] ~ "Moyen",
Somme <= thresholds[3] ~ "Élevé",
TRUE ~ "Très élevé"
))
# Afficher le tableau avec la classification
print(sum_values_country_sector)
# Créer un barplot des classifications par secteur
ggplot(sum_values_country_sector, aes(x = `Sector name`, y = Somme, fill = Classification)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Classification des pays par secteur", x = "Secteur", y = "Somme des valeurs") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcul des moyennes par année et par secteur
productivity_trends <- yl_long %>%
group_by(Year, `Sector name`) %>%
summarise(Productivity = mean(Value, na.rm = TRUE), .groups = 'drop')
# Visualisation
ggplot(productivity_trends, aes(x = Year, y = Productivity, color = `Sector name`)) +
geom_line() +
labs(title = "Évolution de la productivité par secteur", x = "Année", y = "Productivité")
# Calcul du taux de croissance annuel
productivity_trends <- productivity_trends %>%
group_by(`Sector name`) %>%
mutate(Growth_Rate = (Productivity / lag(Productivity) - 1) * 100)
# Identification des périodes de croissance rapide ou de stagnation
productivity_trends <- productivity_trends %>%
mutate(Growth_Category = case_when(
Growth_Rate > 5 ~ "Croissance rapide",
Growth_Rate < -1 ~ "Stagnation",
TRUE ~ "Stable"
))
# Afficher le tableau
print(productivity_trends)
# Calcul de la somme des valeurs par secteur et par année
sector_contribution <- yl_long %>%
group_by(Year, `Sector name`) %>%
summarise(Total_Value = sum(Value, na.rm = TRUE), .groups = 'drop')
# Visualisation
ggplot(sector_contribution, aes(x = Year, y = Total_Value, fill = `Sector name`)) +
geom_area() +
labs(title = "Contribution de chaque secteur à l'économie globale", x = "Année", y = "Valeur totale")
# Supposons que les déflateurs sont stockés dans un tibble `deflators` avec les colonnes 'Year' et 'Deflator'
yl_long <- yl_long %>%
left_join(deflators, by = "Year") %>%
mutate(Value_real = Value / Deflator)
# Agréger les données par genre et par secteur
employment_trends <- employment_data %>%
group_by(Year, `Sector name`, Gender) %>%
summarise(Total_Employment = sum(Employment, na.rm = TRUE), .groups = 'drop')
# Agréger les données par secteur
employment_by_sector <- employment_data %>%
group_by(Year, `Sector name`) %>%
summarise(Total_Employment = sum(Employment, na.rm = TRUE), .groups = 'drop')
colnames(yl_long$Country)
# Ajustement du modèle à effets fixes
model_fixed <- plm(Value ~ Year, data = yl_panel, model = "within")
# Résumé du modèle
summary(model_fixed)
# Statistiques descriptives de base
summary_stats <- yl_long %>%
group_by(Country, `Country name`, Variable, `ISIC code`, `Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE)
)
# Afficher les statistiques descriptives
print(summary_stats)
ggplot(yl_long, aes(x = Year, y = Value, color = `Sector name`)) +
geom_line() +
labs(title = "Tendance des valeurs par secteur au fil des années", x = "Année", y = "Valeur")
ggplot(yl_long, aes(x = Country, y = Value, fill = Country)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(color = "black", size = 0.4, alpha = 0.5) +
labs(title = "Boxplot des valeurs par pays avec points de données", x = "Pays", y = "Valeur")
ggplot(yl_long, aes(x = `Sector name`, y = Value, fill = `Sector name`)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Boxplot des valeurs par secteur", x = "Secteur", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Diagramme de dispersion (scatter plot)
ggplot(yl_long, aes(x = Year, y = Value, color = Country)) +
geom_point() +
labs(title = "Valeurs par année et par pays", x = "Année", y = "Valeur")
# Créer un tableau de statistiques descriptives par secteur
summary_stats_sector <- yl_long %>%
group_by(`Sector name`) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Médiane = median(Value, na.rm = TRUE),
Écart_type = sd(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Q1 = quantile(Value, 0.25, na.rm = TRUE),
Q3 = quantile(Value, 0.75, na.rm = TRUE),
.groups = 'drop'
)
# Afficher le tableau
print(summary_stats_sector)
# Créer un tableau des moyennes par pays et par secteur
mean_values_country_sector <- yl_long %>%
group_by(Country, `Country name`, `Sector name`) %>%
summarise(Moyenne = mean(Value, na.rm = TRUE), .groups = 'drop')
# Afficher le tableau des moyennes
print(mean_values_country_sector)
# Définir les seuils de classification
thresholds <- c(50, 150, 300)
# Ajouter une colonne de classification
mean_values_country_sector <- mean_values_country_sector %>%
mutate(Classification = case_when(
Moyenne <= thresholds[1] ~ "Faible",
Moyenne <= thresholds[2] ~ "Moyen",
Moyenne <= thresholds[3] ~ "Élevé",
TRUE ~ "Très élevé"
))
# Afficher le tableau avec la classification
print(mean_values_country_sector)
# Agréger les données pour obtenir la somme des valeurs par pays et par secteur
sum_values_country_sector <- yl_long %>%
group_by(Country, `Country name`, `Sector name`) %>%
summarise(Somme = sum(Value, na.rm = TRUE), .groups = 'drop')
# Afficher le tableau des sommes
print(sum_values_country_sector)
# Définir les seuils de classification
thresholds <- c(1000, 5000, 10000)
# Ajouter une colonne de classification
sum_values_country_sector <- sum_values_country_sector %>%
mutate(Classification = case_when(
Somme <= thresholds[1] ~ "Faible",
Somme <= thresholds[2] ~ "Moyen",
Somme <= thresholds[3] ~ "Élevé",
TRUE ~ "Très élevé"
))
# Afficher le tableau avec la classification
print(sum_values_country_sector)
# Créer un barplot des classifications par secteur
ggplot(sum_values_country_sector, aes(x = `Sector name`, y = Somme, fill = Classification)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Classification des pays par secteur", x = "Secteur", y = "Somme des valeurs") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcul des moyennes par année et par secteur
productivity_trends <- yl_long %>%
group_by(Year, `Sector name`) %>%
summarise(Productivity = mean(Value, na.rm = TRUE), .groups = 'drop')
# Visualisation
ggplot(productivity_trends, aes(x = Year, y = Productivity, color = `Sector name`)) +
geom_line() +
labs(title = "Évolution de la productivité par secteur", x = "Année", y = "Productivité")
# Calcul du taux de croissance annuel
productivity_trends <- productivity_trends %>%
group_by(`Sector name`) %>%
mutate(Growth_Rate = (Productivity / lag(Productivity) - 1) * 100)
# Identification des périodes de croissance rapide ou de stagnation
productivity_trends <- productivity_trends %>%
mutate(Growth_Category = case_when(
Growth_Rate > 5 ~ "Croissance rapide",
Growth_Rate < -1 ~ "Stagnation",
TRUE ~ "Stable"
))
# Afficher le tableau
print(productivity_trends)
# Calcul de la somme des valeurs par secteur et par année
sector_contribution <- yl_long %>%
group_by(Year, `Sector name`) %>%
summarise(Total_Value = sum(Value, na.rm = TRUE), .groups = 'drop')
# Visualisation
ggplot(sector_contribution, aes(x = Year, y = Total_Value, fill = `Sector name`)) +
geom_area() +
labs(title = "Contribution de chaque secteur à l'économie globale", x = "Année", y = "Valeur totale")
# Agréger les données par secteur
employment_by_sector <- employment_data %>%
group_by(Year, `Sector name`) %>%
summarise(Total_Employment = sum(Employment, na.rm = TRUE), .groups = 'drop')
shiny::runApp('Délit')
runApp('Délit')
runApp('Délit')
runApp('Délit')
runApp('Délit')
runApp('Délit')
runApp('Délit')
shiny::runApp()
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
donnee_region <- donnee %>%
filter(Code.région == input$selected_region, classe == input$selected_classe) %>%
distinct(Code.région, annee, .keep_all = TRUE) %>%  # Empêche les doublons
group_by(annee) %>%
summarise(total_faits = sum(faits, na.rm = TRUE))
# 1️⃣................................ Chargement de packages
library(DT)
library(shiny)
library(shinydashboard)
library(shinyBS) # Charger le package shinyBS
library(leaflet)
library(dplyr)
library(vroom)
library(sf)
library(ggplot2)
library(plotly)
library(data.table)
library(tidyr)
library(dplyr)
library(shinythemes)
library(shinybusy)
library(shinycssloaders)
# 2️⃣.....................Chargement et traitement des données
# ✅Chargement des données
donnee <- vroom("data/donnee-dep-data.gouv-2024-geographie2024-produit-le2025-01-26.csv", delim = ";", show_col_types = FALSE)
donnee <- donnee %>%
rename(
classe = indicateur,
Code.département = Code_departement,
Code.région = Code_region,
unité.de.compte = unite_de_compte,
millPOP = insee_pop_millesime,
millLOG = insee_log_millesime,
faits = nombre,
POP = insee_pop,
LOG = insee_log,
tauxpourmille = taux_pour_mille
) %>%
# ✅ Convertir l'année au format abrégé
mutate(annee = ifelse(annee >= 2000, annee - 2000, annee)) %>%
# ✅ Convertir le taux en numérique (remplacer les virgules par des points si nécessaire)
mutate(tauxpourmille = as.numeric(gsub(",", ".", tauxpourmille)))
donnee_region <- donnee %>%
filter(Code.région == input$selected_region, classe == input$selected_classe) %>%
distinct(Code.région, annee, .keep_all = TRUE) %>%  # Empêche les doublons
group_by(annee) %>%
summarise(total_faits = sum(faits, na.rm = TRUE))
donnee %>%
filter(Code.région == "11", annee == 16) %>%
summarise(total_faits_check = sum(faits, na.rm = TRUE))
donnee %>%
filter(Code.région == "11", annee == 16) %>%
count()
donnee %>%
group_by(Code.région, annee) %>%
summarise(total_faits = sum(faits, na.rm = TRUE)) %>%
arrange(annee, desc(total_faits)) %>%
print(n = 50)
runApp()
runApp('~/Marketing')
runApp('~/Fuites')
